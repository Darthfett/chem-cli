#depend "vec2d"
#depend "event_emitter"
#depend "button"

const {Vec2d, EventEmitter, Button} = window.Chem
const _exports = window.Chem ||= {}

const _exports.Batch = class Batch
  ->
    # indexed by zorder
    @sprites = []
  add: !(sprite) ->
    sprite.batch?.remove sprite
    sprite.batch = this
    (@sprites[sprite.zorder] ?= {})[sprite.id] = sprite
  remove: !(sprite) ->
    delete (@sprites[sprite.zorder] ?= {})[sprite.id]

const _exports.Sprite = class Sprite
  @id_count = 0

  (animation, params) ->
    o =
      pos: new Vec2d(0, 0)
      scale: new Vec2d(1, 1)
      zorder: 0
      batch: null
      rotation: 0
      visible: true
    o <<< params

    @id = Sprite.id_count++

    {
      @pos
      @zorder
      @rotation
      @batch
      @scale
    } = o

    @setAnimation animation
    @setVisible o.visible

    # size of current frame, which does not take scale into account
    @size = new Vec2d(animations[@animation].frames[0].size)

  setAnimation: !(@animation) ->
    throw "bad sprite name" unless @animation

  setVisible: !(@visible) ->
    return unless @batch?
    if @visible
      @batch.add this
    else
      @batch.remove this

  delete: !->
    @batch.remove this

_exports.Engine = class Engine extends EventEmitter
  const target_fps = 60
  const min_fps = 20
  const target_spf = 1 / target_fps

  const schedule = (sec, cb) -> setInterval(cb, sec * 1000)
  const unschedule = clearInterval

  (@canvas) ->
    super()
    # add tabindex property to canvas so that it can receive keyboard input
    @canvas.tabIndex = 0

    @context = @canvas.getContext("2d")
    @size = new Vec2d(@canvas.width, @canvas.height)

  setSize: !(@size) ->
    @canvas.width = @size.x
    @canvas.height = @size.y

  start: !->
    @attachListeners()
    @startMainLoop()

  stop: !->
    @stopMainLoop()
    @removeListeners()

  buttonState: (button) -> !!@button_states[button]
  buttonJustPressed: (button) -> !!@btn_just_pressed[button]
  mousePos: -> @mouse_pos

  clear: !->
    @context.clearRect 0, 0, @size.x, @size.y

  draw: !(batch) ->
    const now = new Date()
    const total_time = (now - @main_loop_start_date) / 1000

    for sprites of batch.sprites
      for id, sprite in sprites
        const animation = animations[sprite.animation]
        const anim_duration = animation.delay * animation.frames.length
        const frame_index = Math.floor((total_time % anim_duration) / animation.delay)
        const frame = animation.frames[frame_index]
        @context.save()
        @context.translate sprite.pos.x, sprite.pos.y
        @context.scale sprite.scale.x, sprite.scale.y
        @context.rotate sprite.rotation
        @context.drawImage spritesheet, frame.pos.x, frame.pos.y, \
          frame.size.x, frame.size.y, \
          -animation.anchor.x, -animation.anchor.y, \
          frame.size.x, frame.size.y
        @context.restore()

  drawFps: !->
    return unless @fps?
    @context.fillText "#{@fps} fps", 0, @size.y


  # private
  startMainLoop: !->
    @main_loop_start_date = previous_update = new Date()
    const max_frame_skips = target_fps - min_fps
    fps_time_passed = 0
    const fps_refresh_rate = 1
    fps_count = 0
    @interval = schedule target_spf, ~>
      const now = new Date()
      delta = (now - previous_update) / 1000
      previous_update := now

      fps_time_passed += delta

      skip_count = 0
      while delta > target_spf and skip_count < max_frame_skips
        @callUpdate target_spf, 1
        skip_count += 1
        delta -= target_spf

      const multiplier = delta / target_spf
      @callUpdate delta, multiplier
      @emit 'draw', @context
      fps_count += 1

      if fps_time_passed >= fps_refresh_rate
        fps_time_passed = 0
        @fps = fps_count / fps_refresh_rate
        fps_count = 0

  callUpdate: !(dt, dx) ->
    @emit 'update', dt, dx
    @btn_just_pressed = {}

  attachListeners: !->
    @button_states = {}
    @btn_just_pressed = {}

    # disable right click context menu
    @canvas.addEventListener 'contextmenu', !(event) ->
      event.preventDefault()

    # mouse input
    @mouse_pos = new Vec2d(0, 0)
    forwardMouseEvent = !(name, event) ~>
      @mouse_pos = new Vec2d(event.offsetX, event.offsetY)
      @emit name, @mouse_pos, Button.MOUSE_OFFSET + event.which
    @canvas.addEventListener 'mousemove', !(event) ->
      forwardMouseEvent 'mousemove', event
    @canvas.addEventListener 'mousedown', !(event) ~>
      const button_id = Button.MOUSE_OFFSET + event.which
      @button_states[button_id] = true
      @btn_just_pressed[button_id] = true

      forwardMouseEvent 'mousedown', event
    @canvas.addEventListener 'mouseup', !(event) ~>
      @button_states[Button.MOUSE_OFFSET + event.which] = false

      forwardMouseEvent 'mouseup', event

    # keyboard input
    @canvas.addEventListener 'keydown', (event) ~>
      const button_id = Button.KEY_OFFSET + event.which
      @button_states[button_id] = true
      @btn_just_pressed[button_id] = true

      @emit 'keydown', button_id
      event.preventDefault()
      return false
    @canvas.addEventListener 'keyup', (event) ~>
      button_id = Button.KEY_OFFSET + event.which
      @button_states[button_id] = false

      @emit 'keyup', button_id
      event.preventDefault()
      return false

  removeListeners: !->
    # TODO

  stopMainLoop: !->
    unschedule @interval

# load assets
spritesheet = null
animations = null
let
  const on_ready_queue = []
  _exports.onReady = !(cb) ->
    if assets_loaded
      cb()
    else
      on_ready_queue.push cb

  # set assets_loaded after all assets are done loading
  assets_loaded = false
  spritesheet_done = false
  animations_json_done = false
  const checkDoneLoading = !->
    if spritesheet_done and animations_json_done
      assets_loaded := true
      cb() for cb of on_ready_queue

  # get the spritesheet
  spritesheet := new Image()
  spritesheet.src = "spritesheet.png"
  spritesheet.onload = !->
    spritesheet_done := true
    checkDoneLoading()

  # get the animations.json file
  request = new XMLHttpRequest()
  request.onreadystatechange = !->
    return unless request.readyState is 4 and request.status is 200
    animations := JSON.parse(request.responseText)
    animations_json_done := true
    checkDoneLoading()
  request.open("GET", "animations.json", true)
  request.send()

