#depend "chem/vec2d"
#depend "chem/helpers"
#depend "chem/event_emitter"

const {
  Vec2d
  EventEmitter
  schedule
  wait
} = window@Chem
const _exports = window@Chem
const _private = window@Chem@Private

const _exports.Sprite = class Sprite extends EventEmitter
  @id_count = 0

  (animation_name, params) ->
    super()
    {
      @pos
      @scale
      @zorder
      @batch
      @rotation
      @loop
    } = o = {
      pos: new Vec2d(0, 0)
      scale: new Vec2d(1, 1)
      zorder: 0
      batch: null
      rotation: 0
      visible: true
      frame_index: 0
      loop: null
    } <<< params

    @id = Sprite.id_count++

    @setAnimationName animation_name

    @setVisible o.visible
    @setFrameIndex 0

#ifdef DEBUG
    if _private.animations!?
      throw "You may not create Sprites until the onReady event has been fired from Chem."
#endif

  setAnimationName: !(animation_name) ->
    anim = _private.animations[animation_name]
#ifdef DEBUG
    if anim!?
      throw "name not found in animation list: #animation_name"
#endif
    @setAnimation _private.animations[animation_name]

  setAnimation: !(@animation) ->
    @animation_name = @animation.name
    {@loop} ?= @animation
    # size of first frame, which does not take scale into account
    @size = @animation.frames[0].size

  # takes scale and current frame into account
  getSize: ->
    @animation.frames[@getFrameIndex()].size.times(@scale.applied(Math.abs))

  # convenience
  getAnchor: -> @animation.anchor.times(@scale.applied(Math.abs))
  getTopLeft: -> @pos.minus(@getAnchor())
  getBottomRight: -> @getTopLeft().plus(@getSize())

  getTop: -> @getTopLeft().y
  getLeft: -> @getTopLeft().x
  getBottom: -> @getBottomRight().y
  getRight: -> @getBottomRight().x

  setLeft: !(x) -> @pos.x = x + @animation.anchor.x
  setRight: !(x) -> @pos.x = x - @animation.anchor.x
  setTop: !(y) -> @pos.y = y + @animation.anchor.y
  setBottom: !(y) -> @pos.y = y - @animation.anchor.y

  isTouching: (sprite) ->
    a_tl = @getTopLeft()
    a_br = @getBottomRight()
    b_tl = sprite.getTopLeft()
    b_br = sprite.getBottomRight()
    not_touching =
      a_tl.x >= b_br.x or
      a_br.x <= b_tl.x or
      a_tl.y >= b_br.y or
      a_br.y <= b_tl.y
    return not not_touching

  setVisible: !(@visible) ->
    return if @batch!?
    if @visible
      @batch.add this
    else
      @batch.remove this

  setZOrder: !(zorder) ->
    if @batch?
      @batch.remove(this)
      @zorder = zorder
      @batch.add(this)
    else
      @zorder = zorder

  setFrameIndex: !(frame_index) ->
    const seconds_passed = frame_index * @animation.delay
    date = new Date()
    date.setMilliseconds(date.getMilliseconds() - seconds_passed * 1000)
    @setAnimationStartDate(date)

  setLoop: !(@loop) ->
    @setUpInterval!

  setAnimationStartDate: !(@animation_start_date) ->
    @setUpInterval!

  getFrameIndex: ->
    const now = new Date()
    const total_time = (now - @animation_start_date) / 1000
    if @loop
      Math.floor((total_time % @animation.duration) / @animation.delay)
    else
      Math.floor(total_time / @animation.delay) <? @animation.frames.length - 1

  delete: !->
    @batch.remove this
    @batch = null

  # private
  setUpInterval: !->
    @interval?.cancel()

    _schedule = if @loop then schedule else wait

    const now = new Date()
    const time_since_start = (now - @animation_start_date) / 1000
    const duration = @animation.duration - time_since_start

    @interval = _schedule duration, ~> @emit \animation_end

